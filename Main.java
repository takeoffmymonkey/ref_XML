/* XML - EXTENSIBLE MARKUP LANGUAGE (РАСШИРЯЕМЫЙ (МЕТА-) ЯЗЫК РАЗМЕТКИ)
 * - язык разметки
 *      - набор символов или последовательностей, вставляемых в текст для передачи информации о его
 *      выводе или строении
 *      - мета-информация для описания документа
 *
 * - расширяемый
 *      - не фиксирует разметку, которая используется в документах
 *          - т.е. она может быть любой в соответствии с потребностями конкретной области
 *          - т.е. ограничен только синтаксическими правилами языка
 *
 * - расширение XML
 *      - это конкретная грамматика, созданная на базе XML
 *          - представлена:
 *             - словарем тегов и их атрибутов
 *             - набором правил, определяющих какие атрибуты могут входить в состав других элементов
 *                  - см. валидация корректности документа
 *
 * - спецификация XML
 *      - описывает XML документы
 *      - частично описывает поведение XML-процессоров
 *          - т.е. программ, которые читают документы и обеспечивают доступ к их содержимому
 *          - см. XML-процессоры (парсеры) и приложения */


/* ПРЕИМУЩЕСТВА
 * - отделяет информацию от ее представления
 * - открытый формат, который может читаться многими приложениями
 *       - напр. браузерами
 * - может использоваться и на клиенте и на сервере
 * - имеет широкую поддержку во многих языках и рантаймах
 * - позволяет разрозненным системам обмениваться данными */


/* НЕДОСТАТКИ
 * - не подходит для хранения больших объемов данных
 * - некоторые другие форматы могут быть более подходящими из-за избыточности синтаксиса XML
 *       - т.е. когда фокус будет не на документах, а на самих данных
 *           - т.е. если много коротких данных, то получится очень много синтаксиса XML
 * - некоторые типы данных, типа картинок, не очень хорошо представляются
 * - сложный XML может быть сложным для чтения (человеку) */


/* ТИПЫ КОНТЕНТА
 * - объявление XML документа: <?xml version = "1.0" encoding="UTF-8" standalone="yes"?>
 *       - информация о самом документе
 *       - не является инструкцией обработки
 *          - имеет схожий синтаксис
 *          - но парсер понимает ее
 *              - в отличие от инструкции обработки
 *       - если указывается, то должно идти в самом начале документа
 *       - может указывать версию языка, на которой написан документ
 *           - по дефолту 1.0
 *       - может указывать кодировку
 *           - по дефолту UTF-8
 *       - может указывать, оставаться ли документу со своим собственным DTD или подключенным
 *           - по дефолту к подключенным
 *               - т.е. standalone="no"
 *
 * - инструкция обработки: <?SpellCheckMode mode="us-english"?>
 *       - это инструкции самому приложению (не парсеру) о том, как работать с документом
 *           - парсер не понимает этих инструкций
 *           - см. XML-процессоры и приложения
 *       - объявление XML документа не относится к инструкциям обработки
 *       - указывается в прологе
 *       - имеет форму <?Цель содержание?>
 *          - содержание опционально
 *              - является просто строкой, но может выглядеть как псевдо-атрибут
 *       - напр. инструкция для xml-stylesheet-приложения (напр. браузера)
 *           <?xml-stylesheet href="my-style.css"?>
 *
 * - элемент и атрибут: <element attribute="value"> text </element>
 *       - элемент
 *           - составная часть документа
 *           - может содержать атрибуты
 *               - указываются только на открывающих тегах элементов
 *               - указываются только единожды для данного элемента
 *               - значение атрибута может быть в одинарных или двойных скобках
 *       - см. структура документа
 *       - см. имена
 *
 * - комментарий: <!--This is a comment-->
 *       - информация для читателя документа
 *           - игнорируется парсером
 *       - начинается с <!--
 *       - заканчивается на -->
 *       - внутри не должно быть --
 *       - могут быть везде, кроме:
 *           - начала документа
 *           - скобок элемента
 *       - & не используется внутри в качестве разметки
 *           - см. символы разметки
 *
 * - секция символьных данных: <![CDATA[This is text & data with special symbols <&>]]>
 *       - информация для парсера, чтобы игнорировать символы разметки (<,> и &) в указанной
 *       символьной последовательности
 *           - т.е. можно обойтись и без него, если использовать ссылки на нужные сущности
 *               - см. символы разметки
 *               - см. ссылка на сущность
 *       - может быть в любом месте документа, где могут быть символьные данные
 *
 * - ссылка на сущность:
 *       - сущность
 *           - см. физическая и логическая структуры документа
 *           - объявляется в DTD: <!ENTITY name "this text will be used for name reference entity">
 *               - см. валидация корректности документа
 *           - есть предустановленные
 *               - см. символы разметки
 *       - 2 типа сущностей:
 *           - общие: (&copyright;)
 *               - помогают сократить и модуляризировать XML документ
 *               - заменяются парсером на полную строку по ссылке
 *           - символьные: (&#60;)
 *               - для специальных символов
 *                   - в т.ч. предустановленных
 *                       - см. символы разметки */


/* СТРУКТУРА ДОКУМЕНТА
 * - ФИЗИЧЕСКАЯ - документ состоит из сущностей:
 *       - сущность:
 *           - "что-то"
 *           - мельчайшая часть в документе
 *           - может ссылаться на другую сущность
 *           - единственный корневой элемент - документная сущность
 *           - содержит символы:
 *               - разметка:
 *                   - теги
 *                   - объявления
 *                   - инструкции обработки
 *                   - атрибуты
 *                   - ссылки на сущности
 *                   - комментарии
 *                   - последовательности символов, которые обрамляют секцию CDATA
 *               - символьные данные
 *                   - часть документа, не принадлежащая разметке
 *                   - могут быть:
 *                       - внутри элементов
 *                       - в специальных секциях CDATA
 *           - имеет имя
 *               - кроме документной сущности
 *
 *
 * - ЛОГИЧЕСКАЯ - документ состоит из:
 *       - пролога:
 *           - может отсутствовать
 *           - может включать:
 *               - объявление XML
 *                   - должно идти первым
 *               - инструкции обработки
 *               - DTD
 *               - комментарии
 *                  - не должен идти в самом начале документа
 *
 *       - корневого элемента:
 *           - обязательная часть документа, составляющая его суть
 *           - может включать:
 *               - символьные данные
 *               - комментарии
 *               - вложенные элементы
 *                   - могут включать все то же, что и сам корневой элемент
 *           - любой элемент:
 *              - границы представлены начальным (<element>) и конечным (</element>) тегами
 *                  - тег - конструкция разметки, которая содержит имя элемента
 *              - имя элемента для <> и </> должно совпадать
 *              - может быть представлен тегом пустого элемента
 *                  <element/>
 *              - если начинается внутри другого, то должен внутри него и заканчиваться
 *              - атрибуты могут использоваться только в начальном теге или теге пустого элемента */


/* ИМЕНА
 * - могут начинаться только с:
 *      - буквы
 *      - символа подчеркивания
 *      - todo двоеточия ?
 *
 * - должны продолжаться допустимыми для имен символами:
 *      - буквы, входящие в Unicode
 *      - арабские цифры
 *      - дефисы
 *      - знаки подчеркивания
 *      - точки
 *      - todo двоеточия ?
 *
 * - не должны быть "XML"
 *      - в любом регистре
 *       - зарезервировано */


/* ПРОСТРАНСТВО ИМЕН
 * - для избежания коллизий имен элементов с именами элементов из других XML синтаксисов
 * - создаются заданием строковых значения атрибуту xmlns в нужном элементе
 *       - значение должно быть уникальным URI
 *           - адрес используется просто из-за уникальности
 *           - что находится по адресу не имеет значения
 *       - если xmlns указан без идентификатора (после двоеточия), то он считается дефолтным:
 *           <html xmlns="http://www.w3.org/1999/xhtml">
 *           - все элементы называются просто по имени
 *               - напр. <table>
 *       - если для xmlns указан дополнительный идентификатор после двоеточия:
 *           <html xmlns="http://www.w3.org/1999/xhtml"
 *           xmlns:furniture="http://www.firniture.org/items">
 *           - все элементы называются с этим идентификатором (ака префиксом)
 *               - напр. <furniture:table> */


/* XML-ПРОЦЕССОРЫ (ПАРСЕРЫ) И ПРИЛОЖЕНИЯ
 * - XML-процессор:
 *       - программа, которая анализирует разметку и передает информацию о структуре документа и
 *       инструкциях обработки другой программе
 *          - т.е. "приложению"
 *       - типы:
 *           - не проверяющие:
 *               - только анализ разметки и передача информации о структуре документа и инструкциях
 *               обработки приложению
 *           - проверяющие:
 *               - анализ разметки и передача информации о структуре документа и инструкциях
 *               обработки приложению
 *               - валидация корректности документа и сообщения о нарушениях установленных правил
 *                  - напр. при помощи DTD */


/* ВАЛИДАЦИЯ КОРРЕКТНОСТИ ДОКУМЕНТА И УСТАНОВКА ПРАВИЛ
 * - проверка соответствия общим правилам синтаксиса XML:
 *       - правильная структура документа
 *       - совпадение имен в начальном и конечном теге элемента
 *       - и т.д.
 *       - иначе документ не будет считаться XML-ным
 *
 * - проверка установленных правил
 *      - правила добавляются 2 способами:
 *          - Document Type Definitions (DTDs)
 *              - унаследован от SGML
 *              - легко использовать, но не являются мощным средством
 *              - пишутся на синтаксисе, немного отличающемся от XML:
 *                  - используется инструкция !DOCTYPE
 *                      - позволяет задать для документа:
 *                          - элементы
 *                          - атрибуты
 *                          - сущности
 *                          - инструкции обработки
 *                          - комментарии
 *                          - ссылки на сущности
 *              - может определяться:
 *                  - внутри документа (standalone="yes")
 *                      <!DOCTYPE greeting [
 *                          <!ELEMENT greeting (#PCDATA)>
 *                      ]>
 *                      <greeting>Hello, world!</greeting>
 *                  - снаружи документа (standalone="no")
 *                      <!DOCTYPE greeting SYSTEM "hello.dtd">
 *                      <greeting>Hello, world!</greeting>
 *                  - где:
 *                      !ELEMENT - тип элемент
 *                      greeting - название элемента
 *                      #PCDATA - тип содержимого (parseable character data)
 *
 *          - XML Schema
 *              - альтернативный и более мощный способ указания правил DTD
 *              - пишется на XML синтаксисе
 *              - хранится только отдельно от самого документа
 *              - использует пространство имен http://www.w3.org/2001/XMLSchema
 *              - обычно используется префикс "xsd"
 *              - напр.:
 *                  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 *                      <xsd:element name="ElemName">
 *                          <xsd:attribute name="AttrName">
 *                      <xsd:element>
 *                  </xsd:schema> */


/* СИМВОЛЫ РАЗМЕТКИ И КОНФЛИКТЫ ПРИ ПАРСИНГЕ
 * - все элементы, инструкции и т.д. начинаются c < и заканчивается на >
 * - специальный символ & для замены текста при помощи ссылки на сущность
 * - чтобы избежать конфликта, возникающего при парсинге символьных данных, символы разметки
 * заменяются на ссылки на сущности:
 *       - < на &lt;
 *       - > на &gt;
 *       - & на &amp;
 *       - ' на &apos;
 *       - " на &quot;
 *       - в секциях CDATA конфликтов не возникает */


/* ПРЕОБРАЗОВАНИЕ ДОКУМЕНТА В ДРУГУЮ СХЕМУ ИЛИ ФОРМАТ
 * - при помощи языка XSLT (Extensible Stylesheet Language Transformation)
 *      - на нем пишется шаблон, который нужно применить к XML данным
 *          - использует XML синтаксис
 *          - создается при помощи корневого тега: <xsl:stylesheet>
 *          - обычно содержит 1 или более тегов <xsl:template>
 *      - шаблон и XML передаются в XSLT Transformation Engine (напр. браузер) и тот выдает
 *      результирующий документ
 *          - шаблон сверяется с XML тегами
 *          - производится замена при совпадениях с шаблоном
 *      - напр. переделка в HTML:
 *          <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 *              </xsl:template match="/SimpleTag">
 *                  <html><head><title>XSLT Example</title></head>
 *                      <body>
 *                          <h1><xsl:value-of select="text()"/></h1>
 *                      </body>
 *                  </html>
 *              </xsl:template>
 *          <xsl:stylesheet> */


/* ЯЗЫКИ ЗАПРОСОВ
 * - XPath:
 *       - компактный синтаксис для адресации содержимого документа, представленного в виде дерева
 *          - похоже на путь к папке в ос
 *              - но вместо файлов и папок узлы (теги)
 *          - "выражение пути" - это серия "шагов локаций"
 *              /: выбрать корневой тег в документе
 *              /rootTag: выбрать корневой тег, но только если он называется "rootTag"
 *              //tagName: найти все элементы "tagName" во всем документе
 *              text(): выбрать текстовое содержание для текущего узла
 *              @name: выбрать атрибут "name" для текущего узла
 *              ..: выбрать родителя текущего узла
 *          - "контекстный узел" - откуда начинается оценивание пути
 *          - "ось" - отношение между контекстом и выбранным узлом
 *          - "предикаты" - дальнейшие уточнения для процесса выбора
 *              - т.к. узлы (элементы) могут одинаково называться
 *              - напр. индекс узла
 *                  - начинаются с 1, а не 0
 *       - выражения XPath могут использоваться в любом контексте, где нужно использовать формальные
 *       ссылки на элементы дерева
 *
 * - XQuery:
 *       - язык программирования, ориентированные на работу с документами
 *       - используются выражения XPath */


/* ЧТЕНИЕ И ЗАПИСЬ XML (ВАРИАНТЫ API)
 * - ЧТЕНИЕ:
 *       - событийный API
 *           - в процессе парсинга при определенном событии вызывается callback-функция
 *              - напр. при появлении открывающегося тега
 *
 *       - потоковый API
 *           - похож на событийный API
 *
 *       - объектный API
 *           - DOM - объектная модель документа
 *           - считывает XML и воссоздает его в памяти в виде объектной структуры
 *
 * - ЗАПИСЬ:
 *       - API прямой записи
 *           - записывает XML тег за тегом, атрибут за атрибутом
 *
 *       - объектный API:
 *           - см. выше */